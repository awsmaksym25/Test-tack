{"remainingRequest":"H:\\Vladilen\\node_modules\\babel-loader\\lib\\index.js!H:\\Vladilen\\src\\store.js","dependencies":[{"path":"H:\\Vladilen\\src\\store.js","mtime":1600539827675},{"path":"H:\\Vladilen\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"H:\\Vladilen\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.array.filter\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    contact_info: false,\n    allContacts: [{\n      name: 'Andrii',\n      lastName: 'Marshuk',\n      phone: '+380637474576',\n      email: 'lifebox@gmail.com'\n    }, {\n      name: 'Ihor',\n      lastName: 'Bukaha',\n      phone: '+380995576123',\n      email: 'Ihor1ox@gmail.com'\n    }, {\n      name: 'Bohdan',\n      lastName: 'Kiriluk',\n      phone: '+380956485111',\n      email: 'Bohdan111@gmail.com'\n    }],\n    contact_backup: []\n  },\n  mutations: {\n    contact_del: function contact_del(state, payload) {\n      state.allContacts = state.allContacts.filter(function (contact) {\n        return state.allContacts.indexOf(contact) !== payload;\n      });\n    },\n    contact_add: function contact_add(state, payload) {\n      state.allContacts.push(payload);\n    },\n    attribute_add: function attribute_add(state, payload) {\n      state.allContacts[payload.id][payload.attribute] = payload.attribute_value;\n    },\n    attribute_remove: function attribute_remove(state, payload) {\n      Vue.delete(state.allContacts[payload.id], \"\".concat(payload.attribute));\n    },\n    attribute_edit: function attribute_edit(state, payload) {\n      state.allContacts[payload.id][payload.attribute] = payload.newValue;\n    },\n    update_copy: function update_copy(state, payload) {\n      state.contact_backup = JSON.parse(JSON.stringify(state.allContacts[payload.id]));\n    },\n    backup_contacts: function backup_contacts(state, payload) {\n      Vue.delete(state.allContacts, \"\".concat(payload.id));\n      state.allContacts[payload.id] = JSON.parse(JSON.stringify(state.contact_backup));\n    }\n  },\n  actions: {},\n  getters: {}\n});",{"version":3,"sources":["H:\\Vladilen\\src\\store.js"],"names":["Vue","Vuex","use","Store","state","contact_info","allContacts","name","lastName","phone","email","contact_backup","mutations","contact_del","payload","filter","contact","indexOf","contact_add","push","attribute_add","id","attribute","attribute_value","attribute_remove","delete","attribute_edit","newValue","update_copy","JSON","parse","stringify","backup_contacts","actions","getters"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC1BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,YAAY,EAAE,KADX;AAEHC,IAAAA,WAAW,EAAE,CACT;AACIC,MAAAA,IAAI,EAAE,QADV;AAEIC,MAAAA,QAAQ,EAAE,SAFd;AAGIC,MAAAA,KAAK,EAAE,eAHX;AAIIC,MAAAA,KAAK,EAAE;AAJX,KADS,EAOT;AACIH,MAAAA,IAAI,EAAE,MADV;AAEIC,MAAAA,QAAQ,EAAE,QAFd;AAGIC,MAAAA,KAAK,EAAE,eAHX;AAIIC,MAAAA,KAAK,EAAE;AAJX,KAPS,EAaT;AACIH,MAAAA,IAAI,EAAE,QADV;AAEIC,MAAAA,QAAQ,EAAE,SAFd;AAGIC,MAAAA,KAAK,EAAE,eAHX;AAIIC,MAAAA,KAAK,EAAE;AAJX,KAbS,CAFV;AAsBHC,IAAAA,cAAc,EAAE;AAtBb,GADmB;AAyB1BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,WADO,uBACKT,KADL,EACYU,OADZ,EACqB;AACxBV,MAAAA,KAAK,CAACE,WAAN,GAAoBF,KAAK,CAACE,WAAN,CAAkBS,MAAlB,CAAyB,UAAAC,OAAO;AAAA,eAAIZ,KAAK,CAACE,WAAN,CAAkBW,OAAlB,CAA0BD,OAA1B,MAAuCF,OAA3C;AAAA,OAAhC,CAApB;AACH,KAHM;AAIPI,IAAAA,WAJO,uBAIKd,KAJL,EAIYU,OAJZ,EAIqB;AACxBV,MAAAA,KAAK,CAACE,WAAN,CAAkBa,IAAlB,CAAuBL,OAAvB;AACH,KANM;AAOPM,IAAAA,aAPO,yBAOOhB,KAPP,EAOcU,OAPd,EAOuB;AAC1BV,MAAAA,KAAK,CAACE,WAAN,CAAkBQ,OAAO,CAACO,EAA1B,EAA8BP,OAAO,CAACQ,SAAtC,IAAmDR,OAAO,CAACS,eAA3D;AACH,KATM;AAUPC,IAAAA,gBAVO,4BAUUpB,KAVV,EAUiBU,OAVjB,EAU0B;AAC7Bd,MAAAA,GAAG,CAACyB,MAAJ,CAAWrB,KAAK,CAACE,WAAN,CAAkBQ,OAAO,CAACO,EAA1B,CAAX,YAA6CP,OAAO,CAACQ,SAArD;AACH,KAZM;AAaPI,IAAAA,cAbO,0BAaQtB,KAbR,EAaeU,OAbf,EAawB;AAC3BV,MAAAA,KAAK,CAACE,WAAN,CAAkBQ,OAAO,CAACO,EAA1B,EAA8BP,OAAO,CAACQ,SAAtC,IAAmDR,OAAO,CAACa,QAA3D;AACH,KAfM;AAgBPC,IAAAA,WAhBO,uBAgBKxB,KAhBL,EAgBYU,OAhBZ,EAgBqB;AACxBV,MAAAA,KAAK,CAACO,cAAN,GAAuBkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe3B,KAAK,CAACE,WAAN,CAAkBQ,OAAO,CAACO,EAA1B,CAAf,CAAX,CAAvB;AACH,KAlBM;AAmBPW,IAAAA,eAnBO,2BAmBS5B,KAnBT,EAmBgBU,OAnBhB,EAmByB;AAC5Bd,MAAAA,GAAG,CAACyB,MAAJ,CAAWrB,KAAK,CAACE,WAAjB,YAAiCQ,OAAO,CAACO,EAAzC;AACAjB,MAAAA,KAAK,CAACE,WAAN,CAAkBQ,OAAO,CAACO,EAA1B,IAAgCQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe3B,KAAK,CAACO,cAArB,CAAX,CAAhC;AACH;AAtBM,GAzBe;AAiD1BsB,EAAAA,OAAO,EAAE,EAjDiB;AAkD1BC,EAAAA,OAAO,EAAE;AAlDiB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n    state: {\r\n        contact_info: false,\r\n        allContacts: [\r\n            {\r\n                name: 'Andrii',\r\n                lastName: 'Marshuk',\r\n                phone: '+380637474576',\r\n                email: 'lifebox@gmail.com'\r\n            },\r\n            {\r\n                name: 'Ihor',\r\n                lastName: 'Bukaha',\r\n                phone: '+380995576123',\r\n                email: 'Ihor1ox@gmail.com'\r\n            },\r\n            {\r\n                name: 'Bohdan',\r\n                lastName: 'Kiriluk',\r\n                phone: '+380956485111',\r\n                email: 'Bohdan111@gmail.com'\r\n            }\r\n        ],\r\n        contact_backup: []\r\n    },\r\n    mutations: {\r\n        contact_del(state, payload) {\r\n            state.allContacts = state.allContacts.filter(contact => state.allContacts.indexOf(contact) !== payload)\r\n        },\r\n        contact_add(state, payload) {\r\n            state.allContacts.push(payload)\r\n        },\r\n        attribute_add(state, payload) {\r\n            state.allContacts[payload.id][payload.attribute] = payload.attribute_value\r\n        },\r\n        attribute_remove(state, payload) {\r\n            Vue.delete(state.allContacts[payload.id], `${payload.attribute}`)\r\n        },\r\n        attribute_edit(state, payload) {\r\n            state.allContacts[payload.id][payload.attribute] = payload.newValue\r\n        },\r\n        update_copy(state, payload) {\r\n            state.contact_backup = JSON.parse(JSON.stringify(state.allContacts[payload.id]))\r\n        },\r\n        backup_contacts(state, payload) {\r\n            Vue.delete(state.allContacts, `${payload.id}`)\r\n            state.allContacts[payload.id] = JSON.parse(JSON.stringify(state.contact_backup))\r\n        }\r\n    },\r\n    actions: {},\r\n    getters: {}\r\n})\r\n"]}]}